#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Made by papi
# Created on: Wed 10 Jun 2020 02:05:00 PM CEST
# dwmstat
# Description:
#  script file for updating the status bar.
# Usage:
#  -v, --verbose   Display the status bar on the terminal
#  -h, --help      Show usage
#  -t, --time      Set the update time in seconds (default=60sec)

import sys, getopt, signal, os

from dwmstat.battery import *
from dwmstat.dateandtime import *
from dwmstat.network import *
from dwmstat.hostname import *
from dwmstat.sound import *
from dwmstat.package import *

from subprocess import call
from time import sleep

# Modules
bat = Battery(False)
date = dateandtime()
net = Network()
hos = hostname()
pac = Package()

# Comand line triggers
verbose = False
time = 60

def usage():
    print("Usage: {}".format(sys.argv[0]))
    print("Sets the status bar of dwm to a small and precise status bar")
    print("Arguments:")
    print("\t-h, --help\t\tThe help message")
    print("\t-v, --verbose\t\tDisplay on the terminal the output of the command")
    print("\t-t, --time\t\tSet the refresh time in seconds (default: 60)")
    print("Status output:")
    print("\t[Date Time][Battery][Local IP addresse][Volume][Distribution hostname]")
    print("Made by p4p1.")

def updatebar():
    if verbose:
        print("Updating status...")
    snd = Sound()
    string = " {} {} {} {} {}".format(str(date), str(bat), str(net), str(snd),
                                      str(hos))
    call(["xsetroot", "-name", string])
    return (string)

def soundhandler(signum, stack):
    if verbose:
        print("Received a signal ({}) to update bar".format(signum))
    updatebar()

def brightnesshandler(signum, stack):
    if verbose:
        print("Received a signal ({}) to update bar".format(signum))
    updatebar()

def package_status():
    if verbose:
        print("entering package status updater")
    inside = False
    while True:
        while pac.is_running():
            fmt = str(pac)
            if verbose:
                print(fmt)
            call(["xsetroot", "-name", fmt])
            sleep(2)
            inside = True
        if inside:
            fmt = updatebar()
            if verbose:
                print(fmt)
            inside = False
        sleep(1)

def main(verbose, time):
    if verbose:
        print("My pid: {}".format(os.getpid()))
    signal.signal(signal.SIGUSR1, soundhandler)
    signal.signal(signal.SIGUSR2, brightnesshandler)
    newpid = os.fork()
    if newpid == 0:
        package_status()
    while True:
        fmt = updatebar()
        if verbose:
            print(fmt)
        sleep(time)

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvt:", ["help", "verbose",
                                                          "time"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()
        sys.exit(2)
    for o, a in opts:
        if o in ("-v", "--verbose"):
            verbose = True
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-t", "--time"):
            time = a
        else:
            assert False, "unhandled option"
    main(verbose, time)
